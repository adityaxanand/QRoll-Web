{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to QRoll For full documentation visit qroll.vercel.app . About QRoll QRoll is a QR code based attendance making system which records the users attendance within a range and make it harder to give proxies whether it's a school, university, big organizations or even an individual organized event. Introduction Purpose: The purpose of the \u201cQRoll\u201d application is to provide a secure and efficient system for recording attendance through QR code scanning and face recognition. Document Conventions: This document follows the IEEE SRS format. Intended Audience and Reading Suggestions: This document is intended for the development team, project manager, and stakeholders. It should be read in conjunction with the project plan. Project Scope: \u201cQRoll\u201d will be a mobile application used by teachers to generate QR codes for attendance and by students to scan these codes and record their attendance. The application will also have a face recognition feature to ensure that the student is present at the time of scanning the QR code. Overall Description Product Perspective: \u201cQRoll\u201d is a standalone product that integrates with existing educational institution systems for attendance tracking. Product Functions: Functions include QR code generation, face recognition, attendance tracking, and location verification. User Classes and Characteristics: Users include teachers who manage attendance and students who mark their presence. Operating Environment: \u201cQRoll\u201d will operate on iOS and Android devices. Design and Implementation Constraints: The app will be designed for smartphones with camera capabilities. User Documentation: User manuals will be provided for both teachers and students. Assumptions and Dependencies: The system assumes all users have a compatible smartphone and internet access. System Features and Requirements Functional Requirements: The system shall generate a new QR code every 3 seconds. The system shall integrate with a face recognition API to validate the student\u2019s identity. The system shall record attendance only if the face recognition is successful. The system shall allow attendance marking within a 10-meter range of the QR code. System Interfaces: \u201cQRoll\u201d will interface with the institution\u2019s database to retrieve class schedules. User Interfaces: The teacher\u2019s dashboard will allow QR code generation, and the student\u2019s dashboard will display classes and the option to scan QR codes. Hardware Interfaces: The application will interface with the device\u2019s camera for QR code scanning. Software Interfaces: \u201cQRoll\u201d will interface with a face recognition software API. Communication Interfaces: The app will use HTTPS for secure data transmission. Security Requirements: Data encryption and secure login will be implemented. Performance Requirements: The app shall support simultaneous use by up to 1000 users. Quality Attributes: The app shall be user-friendly and maintainable. External Interface Requirements User Interfaces: Detailed mockups of the teacher and student dashboards will be provided. Hardware Interfaces: The app will require a camera with at least 720p resolution. Software Interfaces: The app will need to interface with the institution\u2019s student information system. Communication Protocols: The app will use TCP/IP for network communications. Data Formats: The app will use JSON for data exchange between the client and server. Other Non-Functional Requirements Performance Requirements: The system shall process attendance within 2 seconds of scanning. Safety Requirements: The app shall comply with all applicable privacy laws. Security Requirements: The system shall implement two-factor authentication. Software Quality Attributes: The system shall have an uptime of 99.9%. Technology Stack: Frontend: Flutter for cross-platform mobile application development. Backend: Node.js with Express for server-side operations. Database: MongoDB for storing user data, attendance records, and class schedules. Face Recognition API: An external API like Microsoft Azure\u2019s Face API for facial recognition. QR Code Generation: A library such as qr_flutter for Flutter to generate and refresh QR codes. Location Services: GPS integration for geofencing and location validation within a 10-meter range. Authentication: Firebase Authentication for secure user login. Cloud Services: Firebase Cloud Messaging for notifications and Firebase Cloud Functions for serverless operations. Data Transfer: RESTful APIs for communication between the mobile app and the backend server. Security: SSL/TLS encryption for data in transit and bcrypt for hashing sensitive information. Appendices Glossary: Define all technical terms used within the document. Supporting Information: Provide any additional information that supports the understanding of the SRS.","title":"Home"},{"location":"#welcome-to-qroll","text":"For full documentation visit qroll.vercel.app .","title":"Welcome to QRoll"},{"location":"#about-qroll","text":"QRoll is a QR code based attendance making system which records the users attendance within a range and make it harder to give proxies whether it's a school, university, big organizations or even an individual organized event.","title":"About QRoll"},{"location":"#introduction","text":"Purpose: The purpose of the \u201cQRoll\u201d application is to provide a secure and efficient system for recording attendance through QR code scanning and face recognition. Document Conventions: This document follows the IEEE SRS format. Intended Audience and Reading Suggestions: This document is intended for the development team, project manager, and stakeholders. It should be read in conjunction with the project plan. Project Scope: \u201cQRoll\u201d will be a mobile application used by teachers to generate QR codes for attendance and by students to scan these codes and record their attendance. The application will also have a face recognition feature to ensure that the student is present at the time of scanning the QR code.","title":"Introduction"},{"location":"#overall-description","text":"Product Perspective: \u201cQRoll\u201d is a standalone product that integrates with existing educational institution systems for attendance tracking. Product Functions: Functions include QR code generation, face recognition, attendance tracking, and location verification. User Classes and Characteristics: Users include teachers who manage attendance and students who mark their presence. Operating Environment: \u201cQRoll\u201d will operate on iOS and Android devices. Design and Implementation Constraints: The app will be designed for smartphones with camera capabilities. User Documentation: User manuals will be provided for both teachers and students. Assumptions and Dependencies: The system assumes all users have a compatible smartphone and internet access.","title":"Overall Description"},{"location":"#system-features-and-requirements","text":"Functional Requirements: The system shall generate a new QR code every 3 seconds. The system shall integrate with a face recognition API to validate the student\u2019s identity. The system shall record attendance only if the face recognition is successful. The system shall allow attendance marking within a 10-meter range of the QR code. System Interfaces: \u201cQRoll\u201d will interface with the institution\u2019s database to retrieve class schedules. User Interfaces: The teacher\u2019s dashboard will allow QR code generation, and the student\u2019s dashboard will display classes and the option to scan QR codes. Hardware Interfaces: The application will interface with the device\u2019s camera for QR code scanning. Software Interfaces: \u201cQRoll\u201d will interface with a face recognition software API. Communication Interfaces: The app will use HTTPS for secure data transmission. Security Requirements: Data encryption and secure login will be implemented. Performance Requirements: The app shall support simultaneous use by up to 1000 users. Quality Attributes: The app shall be user-friendly and maintainable.","title":"System Features and Requirements"},{"location":"#external-interface-requirements","text":"User Interfaces: Detailed mockups of the teacher and student dashboards will be provided. Hardware Interfaces: The app will require a camera with at least 720p resolution. Software Interfaces: The app will need to interface with the institution\u2019s student information system. Communication Protocols: The app will use TCP/IP for network communications. Data Formats: The app will use JSON for data exchange between the client and server.","title":"External Interface Requirements"},{"location":"#other-non-functional-requirements","text":"Performance Requirements: The system shall process attendance within 2 seconds of scanning. Safety Requirements: The app shall comply with all applicable privacy laws. Security Requirements: The system shall implement two-factor authentication. Software Quality Attributes: The system shall have an uptime of 99.9%.","title":"Other Non-Functional Requirements"},{"location":"#technology-stack","text":"Frontend: Flutter for cross-platform mobile application development. Backend: Node.js with Express for server-side operations. Database: MongoDB for storing user data, attendance records, and class schedules. Face Recognition API: An external API like Microsoft Azure\u2019s Face API for facial recognition. QR Code Generation: A library such as qr_flutter for Flutter to generate and refresh QR codes. Location Services: GPS integration for geofencing and location validation within a 10-meter range. Authentication: Firebase Authentication for secure user login. Cloud Services: Firebase Cloud Messaging for notifications and Firebase Cloud Functions for serverless operations. Data Transfer: RESTful APIs for communication between the mobile app and the backend server. Security: SSL/TLS encryption for data in transit and bcrypt for hashing sensitive information.","title":"Technology Stack:"},{"location":"#appendices","text":"Glossary: Define all technical terms used within the document. Supporting Information: Provide any additional information that supports the understanding of the SRS.","title":"Appendices"},{"location":"utils/authors/","text":"About the author Aditya A 19 year old Application Developer from India.","title":"Authors"},{"location":"utils/authors/#about-the-author","text":"","title":"About the author"},{"location":"utils/authors/#aditya","text":"","title":"Aditya"},{"location":"utils/authors/#a-19-year-old-application-developer-from-india","text":"","title":"A 19 year old Application Developer from India."}]}